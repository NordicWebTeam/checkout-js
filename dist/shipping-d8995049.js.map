{"version":3,"file":"shipping-d8995049.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/IngridV1.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Ingrid.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx"],"sourcesContent":["import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        () => {\n            onUseNewAddress(id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import {\n    Cart,\n    StoreConfig,\n    CheckoutSelectors\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\n\nconst ingridApiUrl = process.env.API_URL;\n\n\nexport interface IngridProps {\n    cart: Cart;\n    config: StoreConfig;\n    onReady?(): void;\n    selectShippingOption (consignmentId: string, optionId?: string): void;\n    selectDefaultShippingOptions: (state: CheckoutSelectors) => void;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    consignments?: any;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass IngridV1 extends Component<IngridProps , ShippingState> {\n    constructor(props: IngridProps) {\n        super(props);\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    getSiw(): void{\n        let cart = this.props.cart;\n        const  storeHash  = this.props.config.storeProfile.storeHash;\n        const countryCode = this.props.consignments[0].address.countryCode;\n        const postalCode = this.props.consignments[0].address.postalCode;\n        \n        fetch(`${ingridApiUrl}?store=${storeHash}&cart_id=${cart.id}&country_code=${countryCode}&postal_code=${postalCode}`, {cache: \"no-store\"})\n        .then(response => response.text())\n        .then(data => {\n            const widgetDiv = document.getElementById('ingrid-widget');\n            if (widgetDiv) {\n                widgetDiv.innerHTML = data;\n                this.replaceScriptNode(document.getElementById(\"shipwallet-container\"));\n                let self = this\n                var checkExists = setInterval(() => {\n                    if (!document.getElementById('ingrid-widget')){\n                        clearInterval(checkExists);\n                    }\n                    let _Sw = (window as any)._sw;\n                    if(_Sw) {\n                        _Sw(function(api : any){\n                            api.on('data_changed', function(m : any,b : any) {\n                                //console.log('data_changed',m,b);\n                                if (!b.initial_load && b.shipping_method_changed || b.pickup_location_changed || b.delivery_address_changed || b.payment_method_changed || b.price_changed) {\n                                    self.optionUpdated(m);\n                                }\n                            })\n                            clearInterval(checkExists);\n                        });\n                    }\n                }, 2000);\n            }\n        })\n        .catch((err) => {\n            console.error('error',err);\n        });\n    }\n\n    optionUpdated(option?: unknown){\n        const { subscribeToConsignments, consignments } = this.props;\n        this.props.selectShippingOption(consignments[0].id);\n        subscribeToConsignments(this.props.selectDefaultShippingOptions);\n        if(option){\n            //console.log('option',option);\n        }\n        \n    }\n\n    replaceScriptNode(node: any){\n        if (!this.isExternalScript(node) && this.isScriptNode(node)) {\n          node.parentNode.replaceChild(this.cloneScriptNode(node), node);\n        } else {\n          var i = 0,\n            children = node.childNodes;\n          while (i < children.length) {\n            this.replaceScriptNode(children[i++]);\n          }\n        }\n        return node;\n      }\n  \n      isScriptNode(node: any)  {\n        return node.nodeName === \"SCRIPT\";\n      }\n  \n      isExternalScript(node: any) {\n        return !!node.src && node.src !== \"\";\n      }\n  \n      cloneScriptNode(node: any) {\n        var script = document.createElement(\"script\");\n        script.text = node.innerHTML;\n        for (var i = node.attributes.length - 1; i >= 0; i--) {\n          script.setAttribute(node.attributes[i].name, node.attributes[i].value);\n        }\n        return script;\n      }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            onReady = noop,\n            //onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            onReady();\n            this.getSiw();\n        } catch (error) {\n            //onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        return (\n            <>\n                <div id=\"ingrid-widget\"></div>\n                <style >{`\n                    #checkout-shipping-options .shippingOptions-container {\n                        display: none !important;\n                    }\n                `}</style>\n            </>\n        );\n    }\n}\n\nexport default IngridV1;","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\nimport IngridV1 from '../IngridV1';\ninterface Window {\n    checkoutConfig: any; // Replace 'any' with the appropriate type\n}\n\n// This line ensures TypeScript uses the extended interface\ndeclare var window: Window;\n\n\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n            { window.checkoutConfig.ingridForm == \"search\" && ( <IngridV1\n                { ...this.props }\n                selectDefaultShippingOptions={this.selectDefaultShippingOptions}\n            />\n            )}\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode = {isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                // consignment.availableShippingOptions &&\n                                // consignment.availableShippingOptions[0].id\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ availableShippingOptions: shippingOptions }) =>\n                shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment, StoreConfig } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n    config: StoreConfig;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n        config\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isLoading,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (itemId: string, itemKey: string) => void = (\n        itemId,\n        itemKey,\n    ) => {\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport isPayPalCommerceFastlaneMethod from './is-paypal-commerce-fastlane-method';\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        methodId,\n        formFields,\n        isLoading,\n        initialize,\n        deinitialize,\n        onUnhandledError,\n        onFieldChange,\n        countries,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n\n    const paypalCommerceFastlaneOptions = {\n        paypalcommercefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const braintreeFastlaneOptions = {\n        braintreefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? paypalCommerceFastlaneOptions\n        : braintreeFastlaneOptions;\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponent.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponent.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React, { FC } from 'react';\n\nimport { PayPalFastlaneShippingAddressForm } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { ShippingAddressProps } from './ShippingAddress';\n\ninterface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId: string,\n    shippingAddress:  Address,\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n    } = props;\n\n    return (\n        <PayPalFastlaneShippingAddressForm\n            address={shippingAddress}\n            countries={countries}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initialize}\n            isLoading={isLoading}\n            methodId={methodId}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={onFieldChange}\n            onUnhandledError={onUnhandledError}\n        />\n    )\n};\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm) {\n        return (\n            <PayPalFastlaneShippingAddress\n                { ...props }\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n    addresses,\n    assignItem,\n    cart,\n    cartHasChanged,\n    createCustomerAddress,\n    consignments,\n    countries,\n    countriesWithAutocomplete,\n    onCreateAccount,\n    customerMessage,\n    deinitialize,\n    deleteConsignments,\n    getFields,\n    googleMapsApiKey,\n    initialize,\n    isBillingSameAsShipping,\n    isGuest,\n    isLoading,\n    isMultiShippingMode,\n    methodId,\n    onMultiShippingSubmit,\n    onSignIn,\n    onSingleShippingSubmit,\n    onUnhandledError,\n    onUseNewAddress,\n    shippingAddress,\n    shouldShowOrderComments,\n    shouldShowSaveAddress,\n    signOut,\n    updateAddress,\n    isShippingStepPending,\n    isFloatingLabelEnabled,\n}: ShippingFormProps & WithLanguageProps) => {\n    // TODO: remove PayPal Fastlane related code and useEffect when PayPal Fastlane will not be available for Store members\n    const {\n        isPayPalFastlaneEnabled,\n        paypalFastlaneAddresses,\n        shouldShowPayPalFastlaneShippingForm,\n    } = usePayPalFastlaneAddress();\n\n    const shippingAddresses = isPayPalFastlaneEnabled\n        ? paypalFastlaneAddresses\n        : addresses;\n\n    useEffect(() => {\n        if (isPayPalFastlaneEnabled && !shouldShowPayPalFastlaneShippingForm) {\n            initialize({ methodId });\n        }\n    }, [isPayPalFastlaneEnabled, shouldShowPayPalFastlaneShippingForm, methodId, initialize]);\n\n    return isMultiShippingMode ? (\n        <MultiShippingForm\n            addresses={shippingAddresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isLoading={isLoading}\n            onCreateAccount={onCreateAccount}\n            onSignIn={onSignIn}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n        />\n    ) : (\n        <SingleShippingForm\n            addresses={shippingAddresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className=\"form-legend-container\">\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    Cart,\n    CheckoutSelectors,\n    StoreConfig,\n    RequestOptions\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\n\nconst ingridApiUrl = process.env.API_URL;\n\n\nexport interface IngridProps {\n    cart: Cart;\n    config: StoreConfig;\n    isBillingSameAsShipping: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    shouldShowOrderComments: boolean;\n    shouldDisableSubmit: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    loadShippingOptions(options?: IngridRequestOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    reloadShippingForm(): void;\n}\n\ndeclare interface IngridRequestOptions extends RequestOptions {\n    /**\n     * Control caching behavior of the request. Set this to 'no-cache' to\n     * prevent caching.\n     */\n    cacheControl: 'max-age=0';\n\n    /**\n     * Additional headers to include in the request.\n     */\n    headers?: Record<string, string>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Ingrid extends Component<IngridProps, ShippingState> {\n    constructor(props: IngridProps) {\n        super(props);\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    getSiw(): void{\n        let cart = this.props.cart;\n        const { storeHash } = this.props.config.storeProfile;\n        \n        fetch(`${ingridApiUrl}?store=${storeHash}&cart_id=${cart.id}`, {cache: \"no-store\"})\n        .then(response => response.text())\n        .then(data => {\n            const widgetDiv = document.getElementById('ingrid-widget');\n            if (widgetDiv) {\n                widgetDiv.innerHTML = data;\n                this.replaceScriptNode(document.getElementById(\"shipwallet-container\"));\n                let self = this\n                var checkExists = setInterval(() => {\n                    if (!document.getElementById('ingrid-widget')){\n                        clearInterval(checkExists);\n                    }\n                    let _Sw = (window as any)._sw;\n                    if(_Sw) {\n                        _Sw(function(api : any){\n                            api.on('data_changed', function(m : any,b : any) {\n                                //console.log('data_changed',m,b);\n                                if (!b.initial_load && b.shipping_method_changed || b.pickup_location_changed || b.delivery_address_changed || b.payment_method_changed || b.price_changed) {\n                                    self.optionUpdated(m);\n                                }\n                            })\n                            api.on('summary_changed', function(summary : any) {\n                                //console.log('summary',summary);\n                                if (summary.delivery_address) {\n                                    let address = summary.delivery_address;\n                                    self.updateAddress(address , true,'shipping');\n                                } else if (summary.billing_address) {\n                                    let address = summary.billing_address;\n                                    self.updateAddress(address , false,'billing');\n                                }\n                            })\n                            clearInterval(checkExists);\n                        });\n                    }\n                }, 2000);\n            }\n        })\n        .catch((err) => {\n            console.error('error',err);\n        });\n    }\n\n    async updateAddress(address: any, billingSameAsShipping: boolean = true, type: string = 'shipping'){\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        let addressData = {\n            first_name: address.first_name,\n            last_name: address.last_name,\n            email: address.email,\n            phone: address.phone_number,\n            address1: address.address_lines[0],\n            city: address.city,\n            state_or_province: address.state,\n            postal_code: address.postal_code,\n            country_code: address.country\n        }\n        if(billingSameAsShipping && type == 'shipping'){\n            promises.push(this.props.updateShippingAddress(addressData));\n            promises.push(this.props.updateBillingAddress(addressData));\n        } else if(!billingSameAsShipping && type == 'shipping'){\n            promises.push(this.props.updateShippingAddress(addressData));\n        } else if(type == 'billing'){\n            promises.push(this.props.updateBillingAddress(addressData));\n        }\n        await Promise.all(promises);\n        this.props.reloadShippingForm();\n    }\n\n    optionUpdated(option?: unknown){\n        const {\n            loadShippingOptions\n        } = this.props;\n        loadShippingOptions();\n        if(option){\n            //console.log('option',option);\n        }\n        \n    }\n\n    replaceScriptNode(node: any){\n        if (!this.isExternalScript(node) && this.isScriptNode(node)) {\n          node.parentNode.replaceChild(this.cloneScriptNode(node), node);\n        } else {\n          var i = 0,\n            children = node.childNodes;\n          while (i < children.length) {\n            this.replaceScriptNode(children[i++]);\n          }\n        }\n        return node;\n      }\n  \n      isScriptNode(node: any)  {\n        return node.nodeName === \"SCRIPT\";\n      }\n  \n      isExternalScript(node: any) {\n        return !!node.src && node.src !== \"\";\n      }\n  \n      cloneScriptNode(node: any) {\n        var script = document.createElement(\"script\");\n        script.text = node.innerHTML;\n        for (var i = node.attributes.length - 1; i >= 0; i--) {\n          script.setAttribute(node.attributes[i].name, node.attributes[i].value);\n        }\n        return script;\n      }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            onReady();\n            this.getSiw();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        return (\n            <>\n                <div id=\"ingrid-widget\"></div>\n                <style >{`\n                    #checkoutShippingAddress {\n                        .form-fieldset {\n                            display: none !important;\n                        }\n                    }\n                    #checkout-shipping-options {\n                        display: none !important;\n                    }\n                `}</style>\n            </>\n        );\n    }\n}\n\nexport default Ingrid;","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\nimport Ingrid from './Ingrid';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    config: StoreConfig;\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\ninterface Window {\n    checkoutConfig: any; // Replace 'any' with the appropriate type\n}\n\n// This line ensures TypeScript uses the extended interface\ndeclare var window: Window;\n\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            onReady();\n\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n        if (window.checkoutConfig && window.checkoutConfig.publicPath) {\n            const publicPath = window.checkoutConfig.publicPath;\n      \n            // Find the script tag by part of its src attribute\n            const scriptTag = document.querySelector(`script[src^=\"${publicPath}\"]`);\n      \n            if (scriptTag) {\n              // Get the full src attribute of the script tag\n              const scriptSrc = scriptTag.getAttribute('src');\n      \n              if (scriptSrc) {\n                // Create a URL object from the scriptSrc\n                const url = new URL(scriptSrc);\n      \n                // Extract the 'form' parameter from the query string\n                const formParamValue = url.searchParams.get('form');\n                window.checkoutConfig.ingridForm = formParamValue;\n              }\n            }\n        }\n//        debugger;\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n        if(window.checkoutConfig.ingridForm == 'delivery'){\n        return (\n            <>\n                <Ingrid\n                    { ...shippingFormProps }\n                    shouldDisableSubmit={false}\n                    updateShippingAddress={updateShippingAddress}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isMultiShippingMode={false}\n                    step={step}\n                    reloadShippingForm={this.reloadShippingForm}\n                />\n                <AddressFormSkeleton isLoading={isInitializing}>\n                    <div className=\"checkout-form\">\n                        <ShippingForm\n                            {...shippingFormProps}\n                            addresses={customer.addresses}\n                            deinitialize={deinitializeShippingMethod}\n                            initialize={initializeShippingMethod}\n                            isBillingSameAsShipping={isBillingSameAsShipping}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            isGuest={isGuest}\n                            isMultiShippingMode={isMultiShippingMode}\n                            onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                            onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                            onUseNewAddress={this.handleUseNewAddress}\n                            shouldShowSaveAddress={!isGuest}\n                            updateAddress={updateShippingAddress}\n                        />\n                    </div>\n                </AddressFormSkeleton>\n            </>\n        );\n        } else {\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n        }\n    }\n\n    private reloadShippingForm = async () => {\n        //updateShippingAddress from consignments\n        const {\n            consignments,\n            updateShippingAddress,\n            onUnhandledError = noop,\n        } = this.props;\n        if (consignments.length > 0) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n        \n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            //billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            // !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n        config\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"names":["data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","memo","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","address","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","AddressType","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","isSelected","renderLabel","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","label","inputName","shippingOptions","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","props","state","isInitializing","getSiw","this","storeHash","storeProfile","fetch","cache","then","response","text","widgetDiv","document","getElementById","innerHTML","replaceScriptNode","checkExists","setInterval","clearInterval","_Sw","window","_sw","api","on","m","b","initial_load","shipping_method_changed","pickup_location_changed","delivery_address_changed","payment_method_changed","price_changed","optionUpdated","catch","err","console","error","option","subscribeToConsignments","selectShippingOption","selectDefaultShippingOptions","node","isExternalScript","isScriptNode","parentNode","replaceChild","cloneScriptNode","children","childNodes","nodeName","script","createElement","attributes","setAttribute","componentDidMount","onReady","noop","setState","render","Component","getConsignments","recommendedOption","singleShippingOption","defaultShippingOption","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","invalidShippingMessage","methodId","checkoutConfig","ingridForm","renderConsignment","selectedShippingOption","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","items","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","testId","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","field","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","localizeAddress","paypalFastlaneShippingComponent","useRef","paypalCommerceFastlaneOptions","paypalcommercefastlane","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","current","showAddressSelector","braintreeFastlaneOptions","braintreefastlane","initializationOptions","useEffect","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","onAddressSelect","PayPalFastlaneShippingAddress","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","connectFormik","ShippingAddressForm","hasRequestedShippingOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","Boolean","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","signOut","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","summary","delivery_address","billing_address","promises","addressData","first_name","last_name","email","phone_number","address_lines","state_or_province","country_code","push","updateShippingAddress","updateBillingAddress","all","reloadShippingForm","loadShippingOptions","handleMultiShippingModeSwitch","onToggleMultiShipping","handleSingleShippingSubmit","addressValues","updateCheckout","navigateNextStep","hasRemoteBilling","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","publicPath","scriptTag","querySelector","scriptSrc","getAttribute","formParamValue","URL","searchParams","get","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","billingAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","shouldUseStripeLinkByMinimumAmount","Shipping"],"sourceRoot":""}